<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on </title>
    <link>//localhost:1313/tags/django/</link>
    <description>Recent content in Django on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Jun 2025 23:13:18 +0700</lastBuildDate>
    <atom:link href="//localhost:1313/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Django Queries</title>
      <link>//localhost:1313/posts/2025-06-24-understanding-django-queries/</link>
      <pubDate>Tue, 24 Jun 2025 23:13:18 +0700</pubDate>
      <guid>//localhost:1313/posts/2025-06-24-understanding-django-queries/</guid>
      <description>&lt;p&gt;Django ORM is great, but remember, every Django query we write gets translated into raw SQL.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I’ll show how Django generates those queries, the cost behind them, and how different ORM methods affect performance, in terms of memory, execution time, and how the query is generated.&lt;/p&gt;&#xA;&lt;p&gt;This post won&amp;rsquo;t cover indexing or general SQL optimization techniques, it focuses purely on how Django ORM translates queries into raw SQL.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mock the Failure</title>
      <link>//localhost:1313/posts/2025-05-29-mock-the-failure/</link>
      <pubDate>Thu, 29 May 2025 22:13:02 +0700</pubDate>
      <guid>//localhost:1313/posts/2025-05-29-mock-the-failure/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not a big fan of mocking, especially when working with databases. For me, when we create tests involving a database, we can&amp;rsquo;t just mock the result because I want to make sure my code actually stores the correct data. I think it is important to verify that the data is stored correctly during testing. Even if we have a nice algorithm in our code, if the stored data is incorrect, it becomes useless.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Reason I Stay Away From Generic Cbv</title>
      <link>//localhost:1313/posts/2025-04-17-the-reason-i-stay-away-from-generic-cbv/</link>
      <pubDate>Thu, 17 Apr 2025 22:23:16 +0700</pubDate>
      <guid>//localhost:1313/posts/2025-04-17-the-reason-i-stay-away-from-generic-cbv/</guid>
      <description>&lt;p&gt;When I write code in Django for the first time, I feel mesmerized by class-based views (CBV), especially the generic views. Look at this CBV example using Django REST Framework:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# serializer.py&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostSerializer&lt;/span&gt;(serializers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ModelSerializer):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Meta&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Post&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__all__&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# views&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostListCreate&lt;/span&gt;(ListCreateAPIView):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     serializer_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PostSerializer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     queryset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostEdit&lt;/span&gt;(RetrieveUpdateDestroyAPIView):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    serializer_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PostSerializer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    queryset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this simple code, I already built full CRUD functionality. This code already supports:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django Update Fields</title>
      <link>//localhost:1313/posts/2025-04-12-django-update-fields/</link>
      <pubDate>Sat, 12 Apr 2025 09:35:06 +0700</pubDate>
      <guid>//localhost:1313/posts/2025-04-12-django-update-fields/</guid>
      <description>&lt;p&gt;Usually when working with Django ORM and want to update data, there are two patterns I always use: .save() and .update().&lt;/p&gt;&#xA;&lt;p&gt;When using .save(), the code becomes like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code will act like this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Run clean() on Django model&lt;/li&gt;&#xA;&lt;li&gt;Run the actual query&lt;/li&gt;&#xA;&lt;li&gt;Run related signal(s)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Using .update()&lt;/p&gt;&#xA;&lt;p&gt;When using .update(), usually it&amp;rsquo;s to change multiple data. So instead of model instance, we use queryset instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Embrace Typehint In Python</title>
      <link>//localhost:1313/posts/2025-04-12-embrace-typehint-in-python/</link>
      <pubDate>Sat, 12 Apr 2025 09:06:47 +0700</pubDate>
      <guid>//localhost:1313/posts/2025-04-12-embrace-typehint-in-python/</guid>
      <description>&lt;p&gt;I tried typehint in python and i didn’t like it, especially when working in legacy code, and then i move to other project, wrote golang code, feels good with the type, want to imitate the type in python and yes i visited again the typehint.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Expectation&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Before we move forward, I must set expectation to myself. The default Python is dynamic typing, so it will not smooth like Go. Why? Let&amp;rsquo;s take a look in this code:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
